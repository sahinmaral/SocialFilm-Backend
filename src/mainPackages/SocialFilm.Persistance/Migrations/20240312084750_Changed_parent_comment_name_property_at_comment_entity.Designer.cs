// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SocialFilm.Persistance.Context;

#nullable disable

namespace SocialFilm.Persistance.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240312084750_Changed_parent_comment_name_property_at_comment_entity")]
    partial class Changed_parent_comment_name_property_at_comment_entity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Security.Entities.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4de444e7-f5e1-4e43-be6b-badd43780c88",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "ca739d3c-f1ed-48ab-aa84-18be21d88601",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Core.Security.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePhotoURL")
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "763ce2a2-d5e9-4b7f-b73a-23d6d912cbc2",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a77709dc-683d-447c-b05c-1a2b7f0f5b1f",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 332, DateTimeKind.Local).AddTicks(8350),
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEM46decASiV4eDaa0eewML8GzJjK7fNQ/D2alMHfcbXE/hTcW5MLXG30pwsjBeGbmw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "aee6d18f-368f-4a34-8de7-b7aad7ce24f9",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "763ce2a2-d5e9-4b7f-b73a-23d6d912cbc2",
                            RoleId = "4de444e7-f5e1-4e43-be6b-badd43780c88"
                        });
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCommentId")
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCommentId");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.FilmDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackdropPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReleaseYear")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("FilmDetails", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.FilmDetailGenre", b =>
                {
                    b.Property<string>("FilmDetailId")
                        .HasColumnType("text");

                    b.Property<string>("GenreId")
                        .HasColumnType("text");

                    b.HasKey("FilmDetailId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmDetailGenres", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Genre", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Genres", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "28",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(1801),
                            Name = "Action"
                        },
                        new
                        {
                            Id = "12",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(1914),
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = "16",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(1957),
                            Name = "Animation"
                        },
                        new
                        {
                            Id = "35",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2015),
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = "80",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2068),
                            Name = "Crime"
                        },
                        new
                        {
                            Id = "99",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2125),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = "18",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2168),
                            Name = "Drama"
                        },
                        new
                        {
                            Id = "10751",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2210),
                            Name = "Family"
                        },
                        new
                        {
                            Id = "14",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2248),
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = "36",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2291),
                            Name = "History"
                        },
                        new
                        {
                            Id = "27",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2330),
                            Name = "Horror"
                        },
                        new
                        {
                            Id = "10402",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2369),
                            Name = "Music"
                        },
                        new
                        {
                            Id = "9648",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2411),
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = "10749",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2454),
                            Name = "Romance"
                        },
                        new
                        {
                            Id = "878",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2501),
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = "10770",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2568),
                            Name = "TV Movie"
                        },
                        new
                        {
                            Id = "53",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2616),
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = "10752",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2650),
                            Name = "War"
                        },
                        new
                        {
                            Id = "37",
                            CreatedAt = new DateTime(2024, 3, 12, 11, 47, 50, 310, DateTimeKind.Local).AddTicks(2688),
                            Name = "Western"
                        });
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.PostPhoto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("PostPhotos", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.SavedFilm", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FilmId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FilmId");

                    b.HasIndex("UserId", "FilmId");

                    b.ToTable("SavedFilms", (string)null);
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.UserFriend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("FriendId")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Core.Security.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Comment", b =>
                {
                    b.HasOne("SocialFilm.Domain.Entities.Comment", "ParentComment")
                        .WithMany("SubComments")
                        .HasForeignKey("ParentCommentId");

                    b.HasOne("SocialFilm.Domain.Entities.Post", null)
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.FilmDetailGenre", b =>
                {
                    b.HasOne("SocialFilm.Domain.Entities.FilmDetail", "FilmDetail")
                        .WithMany("FilmDetailGenres")
                        .HasForeignKey("FilmDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialFilm.Domain.Entities.Genre", "Genre")
                        .WithMany("FilmDetailGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilmDetail");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Post", b =>
                {
                    b.HasOne("SocialFilm.Domain.Entities.FilmDetail", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.PostPhoto", b =>
                {
                    b.HasOne("SocialFilm.Domain.Entities.Post", "Post")
                        .WithMany("PostPhotos")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.SavedFilm", b =>
                {
                    b.HasOne("SocialFilm.Domain.Entities.FilmDetail", "Film")
                        .WithMany("SavedFilms")
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.UserFriend", b =>
                {
                    b.HasOne("Core.Security.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Security.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Comment", b =>
                {
                    b.Navigation("SubComments");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.FilmDetail", b =>
                {
                    b.Navigation("FilmDetailGenres");

                    b.Navigation("SavedFilms");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Genre", b =>
                {
                    b.Navigation("FilmDetailGenres");
                });

            modelBuilder.Entity("SocialFilm.Domain.Entities.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostPhotos");
                });
#pragma warning restore 612, 618
        }
    }
}
